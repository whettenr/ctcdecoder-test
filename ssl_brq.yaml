# ################################
# Recipe for training an SSL-based ctc ASR system with librispeech.
# Decoding is performed with ctc greedy or LM-rescored decoder.
#
# Authors
# * Salah Zaiem 2023
# * Youcef Kemiche 2023
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/LibriSpeech/brqb_contextnet/<seed>
output_wer_folder: !ref <output_folder>/
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: !PLACEHOLDER # e,g./path/to/LibriSpeech
# noise/ris dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_splits: ["train-clean-100"]
dev_splits: ["dev-clean"]
test_splits: ["test-clean", "test-other"]
skip_prep: True
ckpt_interval_minutes: 25 # save checkpoint every N min
csv_location: !PLACEHOLDER
train_csv: !ref <csv_location>/csv/LibriSpeech/train.csv
valid_csv: !ref <csv_location>/csv/LibriSpeech/dev-clean.csv
test_csv:
   - !ref <csv_location>/csv/LibriSpeech/test-clean.csv
   - !ref <csv_location>/csv/LibriSpeech/test-other.csv

num_layers_ssl: 13  #Number of layers in the SSL model (should be 25 for large )
encoder_dim: 512

ssl_hub: !PLACEHOLDER

# Training parameters
number_of_epochs: 20
lr: 0.0002
lr_weights: 0.01
sorting: ascending
precision: fp32
sample_rate: 16000
language_modelling: False
ngram_lm_path: !ref <csv_location>/4-gram.arpa.gz

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 3 per GPU to fit 32GB of VRAM
batch_size: 8
test_batch_size: 4

# Dataloader options
train_dataloader_opts:
   batch_size: !ref <batch_size>

valid_dataloader_opts:
   batch_size: !ref <batch_size>

test_dataloader_opts:
   batch_size: !ref <test_batch_size>

# Model parameters
activation: !name:torch.nn.Sigmoid
dnn_layers: 1
dnn_neurons: 768
freeze_encoder: True

# Outputs
output_neurons: 30
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>

####################### Pre-Trained Model parameters ###########################
# Transformer
d_model: !ref <encoder_dim>
nhead: 8 # table 1 https://arxiv.org/pdf/2010.10504.pdf
num_encoder_layers: 12 # section 4.1.1
num_decoder_layers: 0
d_ffn: 2048
transformer_dropout: 0.1
transformer_activation: !name:torch.nn.GELU
transformer_output_neurons: 5000
attention_type: RelPosMHAXL
encoder_module: conformer

# Feature parameters
n_fft: 400
n_mels: 80

# quantizer parameters not using though for finetunning
p_input: 320
cb_dim: 16
cb_vocab: 8192

############################## Pre-Trained Model ################################

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (128, 32)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (False, False)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 640
    tgt_vocab: !ref <transformer_output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <transformer_activation>
    encoder_module: !ref <encoder_module>
    attention_type: !ref <attention_type>
    normalize_before: True
    causal: False
    output_hidden_states: True


wrapper: !new:speechbrain.lobes.models.transformer.TransformerASR.WeightedEncoderWrapper
   transformer: !ref <Transformer>
   num_layers: !ref <num_layers_ssl>
   freeze: !ref <freeze_encoder>

Quantizer: !new:speechbrain.nnet.quantisers.RandomProjectionQuantizer
    # projection
    input_dim: !ref <p_input>
    # codebook
    cb_dim: !ref <cb_dim>    
    cb_vocab: !ref <cb_vocab>

linear: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <cb_vocab>

pt_model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <wrapper>, !ref <Quantizer>, !ref <linear>]

weighted_ssl_model: !new:speechbrain.lobes.models.transformer.TransformerASR.ComputeFeaturesWrapper
   compute_features: !ref <compute_features>
   normalize: !ref <normalize>
   model: !ref <pt_model>

#####################################################################

enc: !new:speechbrain.lobes.models.ContextNet.ContextNet
   input_shape: [null, null, !ref <encoder_dim>]
   strides: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

# only unitary strides to keep the frame rate


ctc_lin: !new:speechbrain.nnet.linear.Linear
   input_size: 640
   n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
   blank_index: !ref <blank_index>

modules:
   enc: !ref <enc>
   ctc_lin: !ref <ctc_lin>
   weighted_ssl_model: !ref <weighted_ssl_model>

model: !new:torch.nn.ModuleList
   - [!ref <enc>, !ref <ctc_lin>]

model_opt_class: !name:torch.optim.Adam
   lr: !ref <lr>

weights_opt_class: !name:torch.optim.Adam
   lr: !ref <lr_weights>

lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr>
   improvement_threshold: 0.0025
   annealing_factor: 0.8
   patient: 0

lr_annealing_weights: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr_weights>
   improvement_threshold: 0.0025
   annealing_factor: 0.9
   patient: 0

label_encoder: !new:speechbrain.dataio.encoder.CTCTextEncoder
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
   checkpoints_dir: !ref <save_folder>
   recoverables:
      model: !ref <model>
      ssl_model: !ref <weighted_ssl_model>
      scheduler_model: !ref <lr_annealing_model>
      scheduler_encoder: !ref <lr_annealing_weights>
      counter: !ref <epoch_counter>
      tokenizer: !ref <label_encoder>

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
   collect_in: !ref <save_folder>
   loadables:
      pt_model: !ref <pt_model>
      normalize: !ref <normalize>
   paths:
      pt_model: !ref <ssl_hub>/model.ckpt
      normalize: !ref <ssl_hub>/normalizer.ckpt

blank_index: 0
unk_index: 1

test_beam_search:
   beam_size: 100
   topk: 1
   blank_index: !ref <blank_index>
   space_token: ' ' # make sure this is the same as the one used in the tokenizer
   beam_prune_logp: -10.0
   token_prune_min_logp: -5
   prune_history: False
   alpha: 0.5
   beta: 1.0
   # can be downloaded from here https://www.openslr.org/11/ or trained with kenLM
   # It can either be a .bin or .arpa ; note: .arpa is much slower at loading
   # If you don't want to use an LM, comment it out or set it to null
   kenlm_model_path: !ref <ngram_lm_path>


train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
   split_tokens: True
